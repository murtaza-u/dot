#!/bin/bash

# If not running interactively, don't do anything
case $- in
    *i*) ;;
    *) return ;;
esac

# --------------------------------- PATH --------------------------------------
pathappend() {
    declare arg
    for arg in "$@"; do
        test -d "$arg" || continue
        PATH=${PATH//":$arg:"/:}
        PATH=${PATH/#"$arg:"/}
        PATH=${PATH/%":$arg"/}
        export PATH="${PATH:+"$PATH:"}$arg"
    done
}

pathprepend() {
    for arg in "$@"; do
        test -d "$arg" || continue
        PATH=${PATH//:"$arg:"/:}
        PATH=${PATH/#"$arg:"/}
        PATH=${PATH/%":$arg"/}
        export PATH="$arg${PATH:+":${PATH}"}"
    done
}

# remember last arg will be first in path
pathprepend \
    /usr/bin \
    /usr/local/bin \
    /usr/local/sbin \
    /usr/local/go/bin \
    "$HOME/.local/bin" \
    "$HOME/.local/scripts" \
    "$HOME/.local/share/go/bin" \
    "$HOME/.krew/bin"

pathappend \
    "$HOME/.nimble/bin" \
    "$HOME/.local/share/npm-global/bin" \
    "$HOME/.turso" \
    "$HOME/.zig"

# --------------------------------- CDPATH ------------------------------------
export CDPATH=".:$HOME:$HOME/Repos/github.com/murtaza-u"

export TERM=xterm-256color

# helper functions
_have() { type "$1" &>/dev/null; }

# -------------------------- environment variables ----------------------------
REPOS="$HOME/Repos"
GITUSER="murtaza-u"

# go
CGO_ENABLED=0
GOPATH="$HOME/.local/share/go"
GOBIN="$GOPATH/bin"

# colored GCC warnings and errors
GCC_COLORS="error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01"

# ----------------------------- history ---------------------------------------
# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth:erasedups
HISTORY_IGNORE="(ls|cd|pwd|exit|history|cd ..)"

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000000
HISTFILESIZE=10000000

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary, update the values
# of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will match all
# files and zero or more directories and subdirectories.
shopt -s globstar

# disable control-s accidental terminal stops
stty stop undef

# ------------------------------- vi mode -------------------------------------
set -o vi

# C-l clears screen
bind -m vi-command 'Control-l: clear-screen'
bind -m vi-insert 'Control-l: clear-screen'

if _have nvim; then
    alias vi=nvim
elif _have vim; then
    alias vi=vim
fi

export EDITOR=hx

# ----------------------------------- pager -----------------------------------
if [[ -x /usr/bin/lesspipe ]]; then
    export LESSOPEN="| /usr/bin/lesspipe %s";
    export LESSCLOSE="/usr/bin/lesspipe %s %s";
fi

# ----------------------------- dircolors -------------------------------------
if _have dircolors; then
    if [[ -r "$HOME/.config/dircolors" ]]; then
        eval "$(dircolors -b "$HOME/.config/dircolors")"
    else
        eval "$(dircolors -b)"
    fi
fi

# --------------------------- colors in man pages -----------------------------
export LESS_TERMCAP_mb="[1;31m"
export LESS_TERMCAP_md="[1;36m"
export LESS_TERMCAP_me="[0m"
export LESS_TERMCAP_so="[01;37;31m"
export LESS_TERMCAP_se="[0m"
export LESS_TERMCAP_us="[1;32m"
export LESS_TERMCAP_ue="[0m"

# ----------------------------- aliases ---------------------------------------
alias ls='ls --color=auto --group-directories-first'
alias la='ls -A --color=auto --group-directories-first'
alias ll='ls -lh --color=auto --group-directories-first'
alias lal='ls -lAh --color=auto --group-directories-first'
alias grep='grep --color=auto'
alias diff='diff --color=auto'
alias ..='cd ..'
alias ...='cd ../..'
alias t='tmux -u'
alias '?'=duck
alias services='systemctl list-units --type=service'

if _have kubectl && _have k; then
    source <(kubectl completion bash | sed 's/kubectl/k/g')
fi

clone() {
    local repo="$1" user
    local repo="${repo#https://github.com/}"
    local repo="${repo#git@github.com:}"
    if [[ $repo =~ / ]]; then
        user="${repo%%/*}"
    else
        user="$GITUSER"
        [[ -z "$user" ]] && user="$USER"
    fi
    local name="${repo##*/}"
    local userd="$REPOS/github.com/$user"
    local path="$userd/$name"
    [[ -d "$path" ]] && cd "$path" && return
    mkdir -p "$userd"
    cd "$userd"
    echo gh repo clone "$user/$name" -- --recurse-submodule
    gh repo clone "$user/$name" -- --recurse-submodule
    cd "$name"
}

# -------------------------- tab completion -----------------------------------
if ! shopt -oq posix; then
    if [[ -f /usr/share/bash-completion/bash_completion ]]; then
        source /usr/share/bash-completion/bash_completion
    elif [[ -f /etc/bash_completion ]]; then
        source /etc/bash_completion
    fi
fi

owncomp=(vic sshkey x snip muttoauth email)
for i in "${owncomp[@]}"; do
    complete -C "$i" "$i";
done

if [[ -f "$HOME/.dot/sys" ]]; then
    complete -C "$HOME/.dot/sys" ./sys
fi

if [[ -f "$REPOS/github.com/murtaza-u/site/note" ]]; then
    complete -C "$REPOS/github.com/murtaza-u/site/note" ./note
fi

# --------------------------------- prompt ------------------------------------
__ps1() {
    local multiline_prompt="${PROMPT_MULTILINE_ENABLED:-0}"
    local show_hostinfo="${PROMPT_HOSTINFO_ENABLED:-0}"
    local show_kubecontext="${PROMPT_KUBECONTEXT_ENABLED:-0}"

    # colors
    local red='\[\e[1;31m\]'
    local green='\[\e[1;32m\]'
    local yellow='\[\e[1;33m\]'
    local blue='\[\e[1;34m\]'
    local magenta='\[\e[1;35m\]'
    local cyan='\[\e[1;36m\]'
    local white='\[\e[37m\]'
    local reset='\[\e[0m\]'

    local git_status="$(git status 2> /dev/null)"

    local branch_pattern="^(# )?On branch ([^${IFS}]*)"
    if [[ ${git_status} =~ ${branch_pattern} ]]; then
        local branch=${BASH_REMATCH[2]}
    fi

    local hash_pattern="^(# )?HEAD detached at ([^${IFS}]*)"
    if [[ ${git_status} =~ ${hash_pattern} ]]; then
        local hash=${BASH_REMATCH[2]}
    fi

    local modified_pattern="modified:"
    if [[ ${git_status} =~ ${modified_pattern} ]]; then
        local modified_symbol="!"
    fi

    local deleted_pattern="deleted:"
    if [[ ${git_status} =~ ${deleted_pattern} ]]; then
        local deleted_symbol="x"
    fi

    local untracked_pattern="Untracked files:"
    if [[ ${git_status} =~ ${untracked_pattern} ]]; then
        local untracked_symbol="?"
    fi

    if [[ -n "$deleted_symbol" ]] ||
        [[ -n "$modified_symbol" ]] ||
        [[ -n "$untracked_symbol" ]]; then
        local symbols="$(printf "[%s%s%s]" "$deleted_symbol" "$modified_symbol" "$untracked_symbol")"
    fi

    if [[ -n "$git_status" ]]; then
        local gitinfo="$reset:$yellow$branch$hash$red$symbols$reset"
    fi

    if [[ "$show_hostinfo" -ne 0 ]]; then
        local host="$red\u$reset@$blue\h$reset:"
    fi

    local venv="${VIRTUAL_ENV##*/}"
    if [[ -n "$venv" ]]; then
        venv="$green($venv)$reset"
    fi

    local kubecontext
    if _have kubectl && [[ "$show_kubecontext" -ne 0 ]]; then
        kubecontext="$magentaã€£$(kubectl config current-context)$reset"
    fi

    local nixshell
    if [[  "$PATH" =~ /nix/store ]]; then
        nixshell="$green(shell)$reset"
    fi

    local prompt="$host$cyan\W$gitinfo$kubecontext$venv$nixshell$reset"

    if [[ "$multiline_prompt" -ne 0 ]]; then
        PS1="â•” $prompt\nâ•š \$ "
    else
        PS1="$prompt\$ "
    fi
}

PROMPT_COMMAND='__ps1'

if [[ -f "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh" ]]; then
    unset __HM_SESS_VARS_SOURCED
    source "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh"
fi

if _have direnv; then
    # ensure compatibility tmux <-> direnv (for non-nixos distros):
    #
    # if [ -n "$TMUX" ] && [ -n "$DIRENV_DIR" ]; then
    #     unset "${!DIRENV_@}"  # unset env vars starting with DIRENV_
    # fi

    eval "$(direnv hook bash)"
fi
