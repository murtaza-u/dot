#!/usr/bin/env bash

set -e

os=linux
arch="$(dpkg --print-architecture)"
rel="$(lsb_release -cs)"

######## go ########

go.query() {
    curl -fsSL "https://golang.org/dl/?mode=json" | jq -r '.[0]'
}

go.curr_version() {
    [[  "$(go version)" =~ go[0-9]+\.?[0-9]+\.?[0-9]+? ]]
    echo "${BASH_REMATCH[0]}"
}

go.latest_version() {
    local q="$1"
    jq -r '.version' <<< "$q"
}

go.file() {
    local q="$1"
    jq -r '.files[] |
           select(.os == "'"$os"'") |
           select(.arch == "'"$arch"'")' <<< "$q"
}

go.install() {
    local q="$1"
    [[ -z "$q" ]] && q="$(go.query)"

    local f sha name
    f="$(go.file "$q")"
    sha="$(jq -r '.sha256' <<< "$f")"
    name="$(jq -r '.filename' <<< "$f")"

    curl -LO \
        -H "Accept: application/vnd.github.v3+json" \
        "https://dl.google.com/go/$name"

    # verify checksum
    echo "$sha $name" | sha256sum -c

    go.remove
    sudo tar xvzf "$name" -C /usr/local/

    # clean up
    rm -rf "$name"

    echo "Make sure /usr/local/go/bin is in PATH"
}

go.update() {
    local q curr latest
    q="$(go.query)"
    curr="$(go.curr_version)"
    latest="$(go.latest_version "$q")"

    if [[ "$latest" == "$curr" ]]; then
        echo "Go is already up to date"
        return
    fi

    go.install "$q"
}

go.remove() {
    sudo rm -rf /usr/local/go
}

######## kubectl ########

kubectl.curr_version() {
    kubectl version -o json --client | jq -r '.clientVersion.gitVersion'
}

kubectl.latest_version() {
    curl -fsSL "https://dl.k8s.io/release/stable.txt"
}

kubectl.install() {
    local v sha
    v="$(kubectl.latest_version)"
    sha="$(curl -fSsL "https://dl.k8s.io/${v}/bin/linux/amd64/kubectl.sha256")"
    curl -sSLO "https://dl.k8s.io/release/${v}/bin/linux/amd64/kubectl"

    # verify checksum
    echo "$sha kubectl" | sha256sum -c

    chmod +x kubectl
    sudo mv kubectl /usr/bin

    # tab completion
    /usr/bin/kubectl completion bash |
        sudo tee /usr/share/bash-completion/completions/kubectl >/dev/null
}

kubectl.update() {
    local curr latest
    curr="$(kubectl.curr_version)"
    latest="$(kubectl.latest_version)"

    if [[ "$latest" = "$curr" ]]; then
        echo "Kubectl is already up to date"
        return
    fi

    kubectl.install
}

kubectl.remove() {
    sudo rm /usr/bin/kubectl
}

######## minikube ########

minikube.query() {
    curl -fsSL "https://api.github.com/repos/kubernetes/minikube/releases" |
        jq -r '.[] |
            select(.name | test("^v[0-9]+?.?[0-9]+?.?[0-9]+?$")).assets[] |
            select(.name | test("^minikube-linux-amd64(.sha256)?$")).browser_download_url' |
        head -2
}

minikube.curr_version() {
    minikube version --short
}

minikube.latest_version() {
    local q="$1"
    IFS=$'\n' read -r url <<< "$q"

    [[ "$url" =~ v[0-9]+\.?[0-9]+?\.?[0-9]+? ]]
    echo "${BASH_REMATCH[0]}"
}

minikube.install() {
    local q="$1"
    [[ -z "$q" ]] && q="$(minikube.query)"

    while IFS=$'\n' read -r url; do
        curl -OL "$url"
    done <<< "$q"

    local sha
    sha="$(<minikube-linux-amd64.sha256)"

    echo "$sha minikube-linux-amd64" | sha256sum -c
    chmod +x minikube-linux-amd64
    sudo mv minikube-linux-amd64 /usr/bin/minikube

    # clean up
    rm minikube-linux-amd64.sha256

    # tab completion
    /usr/bin/minikube completion bash |
        sudo tee /usr/share/bash-completion/completions/minikube >/dev/null
}

minikube.update() {
    local q curr latest
    q="$(minikube.query)"
    curr="$(minikube.curr_version)"
    latest="$(minikube.latest_version "$q")"

    if [[ "$latest" = "$curr" ]]; then
        echo "Minikube is already up to date"
        return
    fi

    minikube.install "$q"
}

minikube.remove() {
    sudo rm /usr/bin/minikube
}

######## github cli ########

gh.query() {
    curl -fsSL "https://api.github.com/repos/cli/cli/releases" |
        jq -r '.[] |
            select(.tag_name | test("^v[0-9]+?.?[0-9]+?.?[0-9]+?$")).assets[] |
            select(.name | test("^gh_.*_(linux_amd64.tar.gz|checksums.txt)$")).browser_download_url' |
        head -2
}

gh.curr_version() {
    local v
    v="$(gh version)"
    [[ "$v" =~ v[0-9]+\.?[0-9]+?\.?[0-9]+? ]]
    echo "${BASH_REMATCH[0]}"
}

gh.latest_version() {
    local q="$1"
    IFS=$'\n' read -r url <<< "$q"

    [[ "$url" =~ v[0-9]+\.?[0-9]+?\.?[0-9]+? ]]
    echo "${BASH_REMATCH[0]}"
}

gh.install() {
    local q="$1"
    [[ -z "$q" ]] && q="$(gh.query)"

    while IFS=$'\n' read -r url; do
        curl -OL "$url"
    done <<< "$q"

    v="$(gh.latest_version "$q")"
    v="${v#v}"

    checksum="gh_${v}_checksums.txt"
    _untar="gh_${v}_linux_amd64"
    _tar="${_untar}.tar.gz"

    sha256sum -c --ignore-missing "$checksum"
    tar xvzf "$_tar"

    # remove previous version, if any
    gh.remove

    chmod +x "${_untar}/bin/gh"
    sudo mv "${_untar}/bin/gh" /usr/bin

    # man pages
    sudo mkdir -p /usr/share/man/man1
    sudo mv "${_untar}"/share/man/man1/* /usr/share/man/man1

    # tab completion
    /usr/bin/gh completion -s bash |
        sudo tee /usr/share/bash-completion/completions/gh >/dev/null

    # clean up
    rm -rf "$checksum" "${_tar}" "${_untar}"
}

gh.update() {
    local q curr latest
    q="$(gh.query)"
    curr="$(gh.curr_version)"
    latest="$(gh.latest_version "$q")"

    if [[ "$latest" == "$curr" ]]; then
        echo "gh is already up to date"
        return
    fi

    gh.install "$q"
}

gh.remove() {
    sudo rm -rf /usr/bin/gh /usr/share/man/man1/gh.1 /usr/share/man/man1/gh-*.1
}

######## nvim ########

nvim.query() {
    curl -fsSL "https://api.github.com/repos/neovim/neovim/releases" |
        jq -r '.[] |
            select(.tag_name | test("^v[0-9]+?.?[0-9]+?.?[0-9]+?$")).assets[] |
            select(.name | test("^nvim-linux64.deb(.sha256sum)?$")).browser_download_url' |
        head -2
}

nvim.curr_version() {
    read -r v <<< "$(nvim --version)"
    echo "${v#* }"
}

nvim.latest_version() {
    local q="$1"
    IFS=$'\n' read -r url <<< "$q"

    [[ "$url" =~ v[0-9]+\.?[0-9]+?\.?[0-9]+? ]]
    echo "${BASH_REMATCH[0]}"
}

nvim.install() {
    local q="$1"
    [[ -z "$q" ]] && q="$(nvim.query)"

    while IFS=$'\n' read -r url; do
        curl -OL "$url"
    done <<< "$q"

    # verifying checksum
    sha256sum -c < nvim-linux64.deb.sha256sum

    sudo apt-get install ./nvim-linux64.deb

    # clean up
    rm nvim-linux64.deb.sha256sum nvim-linux64.deb
}

nvim.update() {
    local q curr latest
    q="$(nvim.query)"
    curr="$(nvim.curr_version)"
    latest="$(nvim.latest_version "$q")"

    if [[ "$latest" = "$curr" ]]; then
        echo "Neovim is already up to date"
        return
    fi

    nvim.install "$q"
}

nvim.remove() {
    sudo apt-get remove neovim
}

######## docker ########

docker.install() {
    sudo apt-get update -y
    sudo apt-get install ca-certificates curl gnupg lsb-release -y

    local url="https://download.docker.com/linux/debian"
    local key="/usr/share/keyrings/docker.gpg"

    curl -fsSL "$url/gpg" | sudo gpg --dearmor -o "$key"

    echo "deb [arch=$arch signed-by=$key] $url $rel stable" |
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt-get update -y
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io \
        docker-compose-plugin
}


update() {
    local prog="$1"

    if _have "$prog"; then
        _have "$prog.update" && "$prog.update"
        return
    fi

    read -r -p "$prog is likely not installed. Install it? (y|N): " n
    n="${n,,}"

    if [[ "$n" = "y" || "$n" = "yes" ]]; then
        _have "$prog.install" && "$prog.install"
    fi
}

install() {
    local prog="$1"

    if _have "$prog"; then
        echo "$prog seems to be already installed"
        return
    fi

    _have "$prog.install" && "$prog.install"
}

remove() {
    local prog="$1"
    _have "$prog.remove" && "$prog.remove"
}

_have() { type "$1" &>/dev/null; }

_contains() {
    local found=0
    local seek="$1"
    shift

    while [[ -n "$1" ]]; do
        if [[ "$1" == "$seek" ]]; then
            found=1
            break
        fi
        shift
    done

    if [[ "$found" -eq 0 ]]; then
        echo "$seek: not found"
        exit 1
    fi
}

cmds=(install update remove)
progs=(go kubectl minikube gh docker nvim)

######## bash completion context ########

comp() {
    local arg="$1"
    shift

    for c in "$@"; do
        [[ "${c:0:${#arg}}" == "${arg,,}" ]] && echo "$c"
    done
}

if [[ -n "$COMP_LINE" ]]; then
    if [[ "$1" == "$3" ]]; then
        comp "$2" "${cmds[@]}"
        exit 0
    fi

    comp "$2" "${progs[@]}"
    exit 0
fi

numargs="${#@}"

if [[ "$numargs" -lt 1 ]]; then
    echo "very few arguments"
    exit 1
fi

cmd="$1"; shift
declare -a args

if [[ "$numargs" -eq 1 ]]; then
    args=("${progs[@]}")
else
    for p in "$@"; do
        _contains "$p" "${progs[@]}"
        args+=("$p")
    done
fi

case "$cmd" in
    install) for p in "${args[@]}"; do install "$p"; done ;;
    update)  for p in "${args[@]}"; do update "$p"; done ;;
    remove)  for p in "${args[@]}"; do remove "$p"; done ;;
    *)       echo "invalid option: $cmd" && exit 1 ;;
esac
